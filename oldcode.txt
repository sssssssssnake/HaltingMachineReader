
>>> Main.f95 d1dc10cfdb104dbc36ae3cbe7fd01da2c60469f6

subroutine readFile(filePath, fileContents)
    character(:), allocatable, intent(in) :: filePath
    character(:), allocatable, intent(out) :: fileContents
    integer :: iostat, unitNumber, i, fileSize
    character(100) :: testChar

    ! Use a named constant for the unit number
    unitNumber = 10

    ! Open the file and get its size
    open(unitNumber, file=filePath, status="old", iostat=iostat)
    if ( iostat /= 0 ) then
        print *, "Error opening file"
        stop
    end if

    ! Get the file size
    inquire(unitNumber, size=fileSize) 

    ! Allocate the fileContents variable
    allocate(character(fileSize) :: fileContents)
    print *, "File size: ", fileSize
    print *, "File contents length: ", len(fileContents)


    print *, "Reading file"
    print *, "error status: ", iostat

    ! Read the file 
    ! turns out read literally reads line by line and the rewind function is needed to read the file again
    read(unitNumber, '(A)', iostat=iostat) fileContents
    read(unitNumber, '(A)', iostat=iostat) testChar
    print *, "error status: ", iostat
    print *, "testChar: ", testChar
  

end subroutine readFile

<<<


>>> readfile.f95 9942c7e938d5ea920a51d180607c319baddd2fe2
program read_file
    implicit none
    character(len=100) :: line
    integer :: iounit, iostat

    ! Open the file
    open(newunit=iounit, file='main.f95', status='old', action='read', iostat=iostat)
    if (iostat /= 0) then
        print *, 'Error opening file!'
        stop
    end if

    ! Read the file line by line
    do
        read(iounit, '(A)', iostat=iostat) line
        if (iostat /= 0) exit  ! Exit loop on end of file or error
        print *, trim(line)
    end do

    ! Close the file
    close(iounit)
end program read_file

<<<

>>> fileManage.f95 61f951f408101cbef99c1d9b819060f32097041e

    !> Converts a file into code blocks.
    !!
    !! @param fileContents The contents of the file to be converted.
    !! @param lastLine The last line of the file.
    !!
    !! @return the code blocks in the file.
    !! This basically reformats the java code to parser friendly code.
    subroutine convertFileToCodeBlocks(fileContents, lastLine)
        character(:), allocatable, dimension(:), intent(inout) :: fileContents
        integer, intent(in) :: lastLine
        integer :: i, bracketLayersDeep, lineCounter, bracketCounter
        character(:), allocatable :: workingLine
        character(:), allocatable, dimension(:) :: codeBlocksLines
        ! assumes that the code only goes 100 layers deep (plz don't break)
        integer, dimension(2,100) :: beginningLine, endingLine,&
         openBracketLocations, closeBracketLocations
        logical, dimension(100) :: needsReformatting, needsToBeResolved
        logical :: bracketLine

        bracketLayersDeep = 0
        bracketCounter = 0

        ! if the line contains a semicolon, a curly bracket, or an at symbol, then move to the next line
        ! if the line contains a curly bracket, then increment the bracketLayersDeep
        ! if the line contains a closing curly bracket, then decrement the bracketLayersDeep

        goThroughFile: do i = 1, lastLine

            workingLine = fileContents(i)
            bracketLine = .false.
            
            if ( index(workingLine, "{") .gt. 0 ) then
                bracketLayersDeep = bracketLayersDeep + 1
                bracketCounter = bracketCounter + 1
                bracketLine = .true.
                openBracketLocations(1, bracketCounter) = i
                openBracketLocations(2, bracketCounter) = index(workingLine, "{")
            end if
            if ( index(workingLine, "}") .gt. 0 ) then
                closeBracketLocations(1, bracketCounter) = i
                closeBracketLocations(2, bracketCounter) = index(workingLine, "}")
                bracketCounter = bracketCounter - 1
                bracketLayersDeep = bracketLayersDeep - 1
                bracketLine = .true.
            end if

            if (bracketLine) then 
                !the line contains a bracket, so let's check and make sure that it is
                ! the last character in the line
                if ( index(workingLine, "{") .eq. len(trim(workingLine)) ) then
                    ! if the bracket is the last character in the line, then move to the next line
                    ! unless there is a previous line that is unresolved
                    cycle goThroughFile
                else
                    ! if the bracket is not the last character in the line,
                    ! then the line needs to be reformatted
                    needsReformatting(bracketCounter) = .true.
                end if
            end if
            
            ! if ( index(workingLine, ";") .gt. 0 ) then
            !     if (index(workingLine, ";") .eq. len(trim(workingLine)) ) then
            !         ! if the semicolon is the last character in the line, then move to the next line
            !         ! unless there is a previous line that is unresolved
            !         cycle goThroughFile
            !     else
            !         ! if the semicolon is not the last character in the line,
            !         ! then the line needs to be reformatted
            !         needsReformatting(bracketLayersDeep) = .true.
            !     end if
            ! else
            !     ! if the line does not contain a semicolon, then it needs to be resolved
            
            ! end if


        end do goThroughFile
        
        deallocate(workingLine)
        deallocate(codeBlocksLines)
        

    end subroutine convertFileToCodeBlocks
<<<